{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "solution",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "3 2\n1 1 1\n1 2 1\n1 1 2\n",
			"file": "stdin",
			"file_size": 22,
			"file_write_time": 131957831754496666,
			"settings":
			{
				"buffer_size": 22,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "stdout",
			"file_size": 0,
			"file_write_time": 131957443234150647,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import atexit\nimport io\nimport sys\n\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n@atexit.register\ndef write():\n  sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\n\nclass node:\n  value = 0\n  left = None\n  right = None\n\n  def __init__(self, lo, hi):\n    self.lo = lo\n    self.hi = hi\n\n  def insert(self, idx):\n    if self.lo == idx and self.hi == idx:\n      self.value += 1\n      return\n    mid = self.lo + ((self.hi - self.lo) // 2)\n    if idx <= mid:\n      if self.left == None:\n        self.left = node(self.lo, mid)\n      self.left.insert(idx)\n    else:\n      if self.right == None:\n        self.right = node(mid + 1, self.hi)\n      self.right.insert(idx)\n    self.value = 0\n    if self.left != None:\n      self.value += self.left.value\n    if self.right != None:\n      self.value += self.right.value\n\n  def ask(self, n):\n    if self.value < n:\n      return -1\n    if self.lo == self.hi:\n      return self.lo\n    if self.left != None:\n      if self.left.value >= n:\n        return self.left.ask(n)\n      n -= self.left.value\n    return self.right.ask(n)\n\ndef main():\n  n, k = list(map(int, input().split(' ' )))\n  v = []\n  for i in range(n):\n    v.append(list(map(int, input().split(' ' ))))\n  v.sort()\n  ans = 1123456789012345\n  for i in range(n):\n    kappaloiro = []\n    for j in range(i + 1):\n      kappaloiro.append((v[j][1], v[j][2]))\n    kappaloiro.sort()\n    segtree = node(0, 1000000000)\n    for j in range(i + 1):\n      segtree.insert(kappaloiro[j][1])\n      value = segtree.ask(k)\n      if value != -1:\n        ans = min(ans, v[i][0] + kappaloiro[j][0] + value)\n  print(ans)\n  return 0\n\nmain()",
			"file": "python.py",
			"file_size": 1699,
			"file_write_time": 131957649565917176,
			"settings":
			{
				"buffer_size": 1699,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "c_plus_plus.cpp",
			"settings":
			{
				"buffer_size": 2403,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/gardusi/github"
	],
	"file_history":
	[
		"/home/gardusi/github/competitive_programming/templates/c_plus_plus.cpp",
		"/home/gardusi/github/discovery/main.py",
		"/home/gardusi/github/discovery/stdout",
		"/home/gardusi/github/discovery/stdin",
		"/home/gardusi/github/discovery/stderr",
		"/home/gardusi/github/discovery/project.sublime-project",
		"/home/gardusi/Downloads/topicos.txt",
		"/home/gardusi/github/competitive_programming/doing/solution",
		"/home/gardusi/github/competitive_programming/doing/stdin",
		"/home/gardusi/github/competitive_programming/doing/stdout",
		"/home/gardusi/github/competitive_programming/doing/python.py",
		"/home/gardusi/github/competitive_programming/doing/c_plus_plus.cpp",
		"/home/gardusi/Downloads/routers.txt",
		"/home/gardusi/Downloads/show configuration protocols bgp",
		"/home/gardusi/Downloads/help.txt"
	],
	"find":
	{
		"height": 31.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"value",
			"BORDA",
			"maximum",
			"200.225.196.107",
			"200.225.196.179",
			"print"
		],
		"highlight": true,
		"in_selection": true,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"idx"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "solution",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "stdin",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22,
						"regions":
						{
						},
						"selection":
						[
							[
								22,
								22
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "stdout",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "python.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1699,
						"regions":
						{
						},
						"selection":
						[
							[
								1298,
								1298
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 264.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "c_plus_plus.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2403,
						"regions":
						{
						},
						"selection":
						[
							[
								2086,
								2086
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 572.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.335416666666,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "project.sublime-project",
	"replace":
	{
		"height": 78.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/github/discovery/project.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 312.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
